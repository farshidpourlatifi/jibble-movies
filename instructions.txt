Movie Listing App Implementation Instructions

Objective
Create a movie listing app using Vue.js. The app must retrieve a list of movies from the mock
API and render them.

User stories
1. I want to see a list of movies from the provided API (see notes below).
2. Each item shows the movie title, year and IMDB id.
3. I can browse the list using pagination (10 items per page).
4. I can search for movies by title.
5. I can star/unstar a move from the list and keep starred ones in a “Favorites” section.

Requirements
* The app must be written in Vue 3 using the Composition API.
* All scripts must be written in TypeScript.
* Use any CSS-preprocessor (Sass or LESS).
* Use at least one browser storage to persist the data.
* Essential features of the app must be testable with automated unit and optionally end-to-end tests.
* The result must be published in a public Github repository. It would be nice if it can be deployed to and served from Heroku/Firebase, etc.

Mock API
https://jsonmock.hackerrank.com/api/movies/search/?Title=${title}&page=${page}

mock api outputs:

https://jsonmock.hackerrank.com/api/movies/search
```json
{"page":1,"per_page":10,"total":2770,"total_pages":277,"data":[{"Title":"Waterworld","Year":1995,"imdbID":"tt0114898"},{"Title":"Waterworld","Year":1995,"imdbID":"tt0189200"},{"Title":"The Making of 'Waterworld'","Year":1995,"imdbID":"tt2670548"},{"Title":"Waterworld 4: History of the Islands","Year":1997,"imdbID":"tt0161077"},{"Title":"Waterworld","Year":1997,"imdbID":"tt0455840"},{"Title":"Waterworld","Year":1997,"imdbID":"tt0390617"},{"Title":"Swordquest: Waterworld","Year":1983,"imdbID":"tt2761086"},{"Title":"Behind the Scenes of the Most Fascinating Waterworld on Earth: The Great Backwaters, Kerala.","Year":2014,"imdbID":"tt5847056"},{"Title":"Louise's Waterworld","Year":1997,"imdbID":"tt0298417"},{"Title":"Waterworld","Year":2001,"imdbID":"tt0381702"}]}
```

https://jsonmock.hackerrank.com/api/movies/search?page=1
```json
{"page":1,"per_page":10,"total":2770,"total_pages":277,"data":[{"Title":"Waterworld","Year":1995,"imdbID":"tt0114898"},{"Title":"Waterworld","Year":1995,"imdbID":"tt0189200"},{"Title":"The Making of 'Waterworld'","Year":1995,"imdbID":"tt2670548"},{"Title":"Waterworld 4: History of the Islands","Year":1997,"imdbID":"tt0161077"},{"Title":"Waterworld","Year":1997,"imdbID":"tt0455840"},{"Title":"Waterworld","Year":1997,"imdbID":"tt0390617"},{"Title":"Swordquest: Waterworld","Year":1983,"imdbID":"tt2761086"},{"Title":"Behind the Scenes of the Most Fascinating Waterworld on Earth: The Great Backwaters, Kerala.","Year":2014,"imdbID":"tt5847056"},{"Title":"Louise's Waterworld","Year":1997,"imdbID":"tt0298417"},{"Title":"Waterworld","Year":2001,"imdbID":"tt0381702"}]}
```

https://jsonmock.hackerrank.com/api/movies/search?page=2
```json
{"page":2,"per_page":10,"total":2770,"total_pages":277,"data":[{"Title":"Deep Waterworld","Year":1995,"imdbID":"tt0124365"},{"Title":"Italian Spiderman","Year":2007,"imdbID":"tt2705436"},{"Title":"Superman, Spiderman or Batman","Year":2011,"imdbID":"tt2084949"},{"Title":"Spiderman","Year":1990,"imdbID":"tt0100669"},{"Title":"Spiderman","Year":2010,"imdbID":"tt1785572"},{"Title":"Fighting, Flying and Driving: The Stunts of Spiderman 3","Year":2007,"imdbID":"tt1132238"},{"Title":"Spiderman and Grandma","Year":2009,"imdbID":"tt1433184"},{"Title":"The Amazing Spiderman T4 Premiere Special","Year":2012,"imdbID":"tt2233044"},{"Title":"Amazing Spiderman Syndrome","Year":2012,"imdbID":"tt2586634"},{"Title":"Hollywood's Master Storytellers: Spiderman Live","Year":2006,"imdbID":"tt2158533"}]}
```

https://jsonmock.hackerrank.com/api/movies/search/?Title=water
```json
{"page":1,"per_page":10,"total":21,"total_pages":3,"data":[{"Title":"Waterworld","Year":1995,"imdbID":"tt0114898"},{"Title":"Waterworld","Year":1995,"imdbID":"tt0189200"},{"Title":"The Making of 'Waterworld'","Year":1995,"imdbID":"tt2670548"},{"Title":"Waterworld 4: History of the Islands","Year":1997,"imdbID":"tt0161077"},{"Title":"Waterworld","Year":1997,"imdbID":"tt0455840"},{"Title":"Waterworld","Year":1997,"imdbID":"tt0390617"},{"Title":"Swordquest: Waterworld","Year":1983,"imdbID":"tt2761086"},{"Title":"Behind the Scenes of the Most Fascinating Waterworld on Earth: The Great Backwaters, Kerala.","Year":2014,"imdbID":"tt5847056"},{"Title":"Louise's Waterworld","Year":1997,"imdbID":"tt0298417"},{"Title":"Waterworld","Year":2001,"imdbID":"tt0381702"}]}
```


Project Structure
Create the following directory structure:
src/
├── assets/
│   └── scss/
│       ├── _variables.scss
│       └── main.scss
├── components/
│   ├── ui/
│   │   ├── Button.vue
│   │   ├── Card.vue
│   │   ├── Input.vue
│   │   └── Modal.vue
│   ├── movies/
│   │   ├── MovieCard.vue
│   │   ├── MovieList.vue
│   │   ├── MovieSearch.vue
│   │   ├── MoviePagination.vue
│   │   └── FavoritesList.vue
│   └── shared/
│       ├── AppHeader.vue
│       └── LoadingState.vue
├── composables/
│   └── useMovieSearch.ts
├── router/
│   └── index.ts
├── stores/
│   ├── movies.ts
│   └── favorites.ts
├── types/
│   └── movie.ts
├── utils/
│   └── storage.ts
├── views/
│   ├── HomeView.vue
│   └── FavoritesView.vue
└── App.vue

tests/
├── components/
│   └── movies/
│       ├── MovieCard.spec.ts
│       └── MovieList.spec.ts
├── stores/
│   ├── movies.spec.ts
│   └── favorites.spec.ts
├── constants/
│   └── test-ids.ts
└── mocks/
    ├── movieData.ts
    └── api.ts

cypress/
└── e2e/
    └── movies.cy.ts




# Key Features to Implement

## Movie Search:
Search input with debounce
Loading state indication
Error handling
Empty state handling


## Pagination:
10 items per page
Previous/Next buttons
Current page indication
Proper state management


##Favorites:
Toggle favorite status
Persist favorites in localStorage
Separate favorites view
Favorite counter



# Implementation Order

1. Set up project structure and dependencies
2. Implement types and API service
3. Create Pinia stores
4. Implement base components
5. Add routing
6. Implement search and pagination
7. Add favorites functionality
8. Write tests
9. Add styling and polish UI
10. Implement E2E tests

## Remember to:
* Follow the test-driven development approach
* Use the provided TEST_IDS constant for test selectors
* Implement error handling throughout the application
* Follow the component structure from the provided code
* Use TypeScript strictly
* Write tests for all features